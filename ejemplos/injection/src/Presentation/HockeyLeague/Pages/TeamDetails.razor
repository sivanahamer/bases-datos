@page "/teams/{TeamId:long}"
@using UCR.Application.HockeyLeague
@using UCR.Domain.HockeyLeague.Entities
@using UCR.Presentation.HockeyLeague.Components

@inject ITeamService TeamService;
<div class="container">
	<Loading IsLoading="_isLoading">
		@if (_team is null)
		{
			<h4 class="text-danger">
				The team you searched for could not be found.
			</h4>
		}
		else
		{
			@if (_rosterErrorMessage is not null)
			{
				<Alert Color="Alert.AlertColor.Danger">
					@_rosterErrorMessage
				</Alert>
			}
			<TeamRoster Team="_team" OnDelete="HandlePlayerDelete" />
		}
		@if (_playerFormErrorMessage is not null)
		{
			<Alert Color="Alert.AlertColor.Danger">
				@_playerFormErrorMessage
			</Alert>
		}
		<PlayerForm OnValidSubmit="@HandlePlayerSubmit" Team="_team" />
	</Loading>
</div>
@code {
	[Parameter]
	public long TeamId { get; set; }
	private Team? _team;
	private bool _isLoading = true;
	private string? _playerFormErrorMessage = null;
	private string? _rosterErrorMessage = null;

	protected override async Task OnInitializedAsync()
	{
		await LoadTeam();
		_isLoading = false;
	}

	public async Task LoadTeam()
	{
		_team = await TeamService.GetTeamByIdAsync(TeamId);
	}

	private async Task HandlePlayerSubmit(Player player)
	{
		_playerFormErrorMessage = null;
		try
		{
			await TeamService.AddPlayerToTeamRosterAsync(_team!, player);
		}
		catch (DomainException e)
		{
			_playerFormErrorMessage = e.Message;
		}
		catch (Exception)
		{
			_playerFormErrorMessage = "An error ocurred. Please try again later.";
		}
	}

	private async Task HandlePlayerDelete(Player player)
	{
		_rosterErrorMessage = null;
		try
		{
			await TeamService.DeletePlayerAndRemoveFromTeamRosterAsync(_team!,
			player);
		}
		catch (DomainException e)
		{
			_rosterErrorMessage = e.Message;
		}
		catch (Exception)
		{
			_rosterErrorMessage = "An error occurred. Please try again later.";
		}
	}
}
